<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[BlindFolded Archer]]></title>
  <link href="http://teopeurt.github.com/atom.xml" rel="self"/>
  <link href="http://teopeurt.github.com/"/>
  <updated>2012-09-10T14:32:17+01:00</updated>
  <id>http://teopeurt.github.com/</id>
  <author>
    <name><![CDATA[Don]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mobile Cross Platform Strategy]]></title>
    <link href="http://teopeurt.github.com/blog/2012/09/10/mobile-cross-platform-strategy/"/>
    <updated>2012-09-10T14:20:00+01:00</updated>
    <id>http://teopeurt.github.com/blog/2012/09/10/mobile-cross-platform-strategy</id>
    <content type="html"><![CDATA[<h2>Define the Problem</h2>

<p>Define the problem we face today</p>

<h2>Define the solution</h2>

<p>list possible solution and setbacks
note: underlying architecture (C/C++)</p>

<h3>Why Does it Works?</h3>

<p>what is the best way</p>

<h3>Example App</h3>

<p>Why it Works
How it works</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails - Efficiency in Production]]></title>
    <link href="http://teopeurt.github.com/blog/2012/09/04/rails-efficiency-in-production/"/>
    <updated>2012-09-04T16:22:00+01:00</updated>
    <id>http://teopeurt.github.com/blog/2012/09/04/rails-efficiency-in-production</id>
    <content type="html"><![CDATA[<p>Rails Asset Pipeline - rails book</p>

<p>Source:</p>

<p>Efficiency in Production
One of the best things about the asset pipeline is that it automatically results in assets that are optimized to be efficient in a production application. Traditional methods for organizing CSS and JavaScript involve splitting functionality into separate files and using nice formatting (with lots of indentation). While convenient for the programmer, this is inefficient in production; including multiple full-sized files can significantly slow page-load times (one of the most important factors affecting the quality of the user experience). With the asset pipeline, in production all the application stylesheets get rolled into one CSS file (application.css), all the application JavaScript code gets rolled into one JavaScript file (javascripts.js), and all such files (including those in lib/assets and vendor/assets) are minified to remove the unnecessary whitespace that bloats file size. As a result, we get the best of both worlds: multiple nicely formatted files for programmer convenience, with single optimized files in production.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making an EPUB Reader for Cocoa]]></title>
    <link href="http://teopeurt.github.com/blog/2012/09/03/making-an-epub-reader-for-cocoa/"/>
    <updated>2012-09-03T23:41:00+01:00</updated>
    <id>http://teopeurt.github.com/blog/2012/09/03/making-an-epub-reader-for-cocoa</id>
    <content type="html"><![CDATA[<p>Source: http://stackoverflow.com/questions/1388467/reading-epub-format</p>

<p>The EPUB format brings together a bunch of different specifications / formats:</p>

<p>one to say what the content of the book should look like (a subset of XHTML 1.1 + CSS)
one to define a &#8220;manifest&#8221; that lists all of the files that make up that content (OPF, which is an XML file)
one to define how everything is packaged up (OEBPS: a zip file of everything in the manifest plus a few extra files)
The specs look a bit daunting but actually once you&#8217;ve got the basics (unzipping, parsing XML) down it&#8217;s not particularly difficult or complex.</p>

<p>You&#8217;ll need to work out how to download the EPUB, to unzip it somewhere, to parse the manifest and then to display the relevant content.</p>

<p>Some pointers if you&#8217;re just starting out:</p>

<p>parse xml
unzip
To display content just use a UIWebView for now.</p>

<p>Here&#8217;s a high level step by step for your code:</p>

<p>1) create a view with a UIWebView</p>

<p>2) download the EPUB file</p>

<p>3) unzip it to a subdirectory in your app&#8217;s documents folder using the zip library, linked above</p>

<p>4) parse the XML file at META-INF/container.xml (if this file doesn&#8217;t exist the EPUB is invalid) using TBXML, linked above</p>

<p>5) In this XML, find the first &#8220;rootfile&#8221; with media-type application/oebps-package+xml. This is the OPF file for the book.</p>

<p>6) parse the OPF file (also XML)</p>

<p>7) now you need to know what the first chapter of the book is.</p>

<p>a) each <item> in the <manifest> element has an id and an href. Store these in an NSDictionary where the key is the id and the object is the href.</p>

<p>b) Look at the first <itemref> in the <spine>. It has an idref attribute which corresponds to one of the ids in (a). Look up that id in the NSDictionary and you&#8217;ll get an href.</p>

<p>c) this is the the file of the first chapter to show the user. Work out what the full path is (hint: it&#8217;s wherever you unzipped the zip file to in (3) plus the base directory of the OPF file in (6))</p>

<p>8) create an NSURL using fileURLWithPath:, where the path is the full path from (7c). Load this request using the UIWebView you created in (1).</p>

<p>You&#8217;ll need to implement forward / backward buttons or swipes or something so that users can move from one chapter to another. Use the <spine> to work out which file to show next - the <itemrefs> in the XML are in the order they should appear to the reader.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Distributed Conputing With Ruby]]></title>
    <link href="http://teopeurt.github.com/blog/2012/09/03/distributed-conputing-with-ruby/"/>
    <updated>2012-09-03T23:26:00+01:00</updated>
    <id>http://teopeurt.github.com/blog/2012/09/03/distributed-conputing-with-ruby</id>
    <content type="html"><![CDATA[<p>sources/links
https://github.com/celluloid/dcell
https://github.com/mperham/sidekiq
https://github.com/celluloid/celluloid</p>

<p>Reel is a fast Celluloid::IO-powered web server which supports both non-blocking and blocking modes of operation:</p>

<p>https://github.com/celluloid/reel</p>

<p>This release brings three major new features:</p>

<ol>
<li>WebSockets: Reel now supports WebSockets in addition to standard HTTP connections. An example of using WebSockets is available here:</li>
</ol>


<p>https://github.com/celluloid/reel/blob/master/examples/websockets.rb</p>

<p>This example shows how to do a message fanout from a single actor to several websockets connections. This shows how simple it is to use Reel and Celluloid to implement WebSockets publish/subscribe systems.</p>

<ol>
<li><p>Rack support: Reel now provides a Rack adapter, although the Rack API severely limits the kinds of end-to-end streaming Reel is capable of</p></li>
<li><p>Octarine support: Reel now lets you write simple Sinatra-like applications using the Octarine gem:</p>

<p> class MyApp
   include Reel::App</p>

<p>   get &#8216;/foobar&#8217; { [200, {}, &#8220;hello world&#8221; }
 end</p>

<p> MyApp.new(&#8216;127.0.0.1&#8217;, 1234)</p></li>
</ol>


<p>&#8211;
Tony Arcieri</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DNS Service Providers]]></title>
    <link href="http://teopeurt.github.com/blog/2012/09/03/dns-service-providers/"/>
    <updated>2012-09-03T10:54:00+01:00</updated>
    <id>http://teopeurt.github.com/blog/2012/09/03/dns-service-providers</id>
    <content type="html"><![CDATA[<p>http://aws.amazon.com/about-aws/whats-new/2010/12/06/announcing-amazon-route-53-dns-service/
https://dnsimple.com/domains/new
http://www.nettica.com/Prices/Default.aspx
http://www.dnsmadeeasy.com/</p>

<p>My features
Aname, CName, DynamicDNS, API, Cheap / 10s - 100s of domains, TTL (not that these are respected)
setup, docs,</p>

<p>How do these Compare?</p>

<h2>Background</h2>

<p>Always used Linode DNS manager, but not suitable for everything - especially A-Name</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[F-Script]]></title>
    <link href="http://teopeurt.github.com/blog/2012/08/20/f-script/"/>
    <updated>2012-08-20T16:33:00+01:00</updated>
    <id>http://teopeurt.github.com/blog/2012/08/20/f-script</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Village Telco]]></title>
    <link href="http://teopeurt.github.com/blog/2012/08/20/village-telco/"/>
    <updated>2012-08-20T14:04:00+01:00</updated>
    <id>http://teopeurt.github.com/blog/2012/08/20/village-telco</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS App - MobileOrg+]]></title>
    <link href="http://teopeurt.github.com/blog/2012/08/20/ios-app-mobileorg-plus/"/>
    <updated>2012-08-20T14:04:00+01:00</updated>
    <id>http://teopeurt.github.com/blog/2012/08/20/ios-app-mobileorg-plus</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS App - Siphone]]></title>
    <link href="http://teopeurt.github.com/blog/2012/08/20/ios-app-siphone/"/>
    <updated>2012-08-20T14:02:00+01:00</updated>
    <id>http://teopeurt.github.com/blog/2012/08/20/ios-app-siphone</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Game - Pigs Can Fly]]></title>
    <link href="http://teopeurt.github.com/blog/2012/08/20/ios-game-pigs-can-fly/"/>
    <updated>2012-08-20T13:52:00+01:00</updated>
    <id>http://teopeurt.github.com/blog/2012/08/20/ios-game-pigs-can-fly</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[USB-Hosts for Arduino Mega ADK - Patch Report]]></title>
    <link href="http://teopeurt.github.com/blog/2012/08/20/usb-hosts-for-arduino-mega-adk-patch-report/"/>
    <updated>2012-08-20T13:51:00+01:00</updated>
    <id>http://teopeurt.github.com/blog/2012/08/20/usb-hosts-for-arduino-mega-adk-patch-report</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LiveCoding: RailsApp + MongoDB + Twilio on PaaS - CloudFoundry]]></title>
    <link href="http://teopeurt.github.com/blog/2012/08/20/livecoding-railsapp-plus-mongodb-plus-twilio-on-paas-cloudfoundry/"/>
    <updated>2012-08-20T13:47:00+01:00</updated>
    <id>http://teopeurt.github.com/blog/2012/08/20/livecoding-railsapp-plus-mongodb-plus-twilio-on-paas-cloudfoundry</id>
    <content type="html"><![CDATA[<p>RailsGirls</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OAuth Providers - A perceptive]]></title>
    <link href="http://teopeurt.github.com/blog/2012/08/20/oauth-providers-a-perceptive/"/>
    <updated>2012-08-20T13:44:00+01:00</updated>
    <id>http://teopeurt.github.com/blog/2012/08/20/oauth-providers-a-perceptive</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Texture Packing - An Algorithm]]></title>
    <link href="http://teopeurt.github.com/blog/2012/08/20/texture-packing-an-algorithm/"/>
    <updated>2012-08-20T13:43:00+01:00</updated>
    <id>http://teopeurt.github.com/blog/2012/08/20/texture-packing-an-algorithm</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Texture Packing Using Scala]]></title>
    <link href="http://teopeurt.github.com/blog/2012/08/20/texture-packing-using-scala/"/>
    <updated>2012-08-20T13:42:00+01:00</updated>
    <id>http://teopeurt.github.com/blog/2012/08/20/texture-packing-using-scala</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Texture Packing Using Objective-C]]></title>
    <link href="http://teopeurt.github.com/blog/2012/08/20/texture-packing-using-objective-c/"/>
    <updated>2012-08-20T13:42:00+01:00</updated>
    <id>http://teopeurt.github.com/blog/2012/08/20/texture-packing-using-objective-c</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Texture Packing Using Go]]></title>
    <link href="http://teopeurt.github.com/blog/2012/08/20/texture-packing-using-go/"/>
    <updated>2012-08-20T13:42:00+01:00</updated>
    <id>http://teopeurt.github.com/blog/2012/08/20/texture-packing-using-go</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Texture Packing Using C++]]></title>
    <link href="http://teopeurt.github.com/blog/2012/08/20/texture-packing-using-c-plus-plus/"/>
    <updated>2012-08-20T13:42:00+01:00</updated>
    <id>http://teopeurt.github.com/blog/2012/08/20/texture-packing-using-c-plus-plus</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NASA OpenSource on Github]]></title>
    <link href="http://teopeurt.github.com/blog/2012/08/20/nasa-opensource-on-github/"/>
    <updated>2012-08-20T13:41:00+01:00</updated>
    <id>http://teopeurt.github.com/blog/2012/08/20/nasa-opensource-on-github</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Canon EOS400D and Arduino Mega ADK]]></title>
    <link href="http://teopeurt.github.com/blog/2012/08/20/canon-eos400d-and-arduino-mega-adk/"/>
    <updated>2012-08-20T13:40:00+01:00</updated>
    <id>http://teopeurt.github.com/blog/2012/08/20/canon-eos400d-and-arduino-mega-adk</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
